{"version":3,"file":"static/js/133.f4ab7b50.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/Register.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nconst Register = memo(\n    ({\n        kcContext,\n        i18n,\n        doFetchDefaultThemeResources = true,\n        ...props\n    }: { kcContext: KcContextBase.Register; i18n: I18n; doFetchDefaultThemeResources?: boolean } & KcProps) => {\n        const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n        const { msg, msgStr } = i18n;\n\n        const { cx } = useCssAndCx();\n\n        return (\n            <Template\n                {...{ kcContext, i18n, doFetchDefaultThemeResources, ...props }}\n                headerNode={msg(\"registerTitle\")}\n                formNode={\n                    <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"firstName\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"firstName\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"firstName\"\n                                    className={cx(props.kcInputClass)}\n                                    name=\"firstName\"\n                                    defaultValue={register.formData.firstName ?? \"\"}\n                                />\n                            </div>\n                        </div>\n\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"lastName\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"lastName\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"lastName\"\n                                    className={cx(props.kcInputClass)}\n                                    name=\"lastName\"\n                                    defaultValue={register.formData.lastName ?? \"\"}\n                                />\n                            </div>\n                        </div>\n\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"email\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"email\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"email\"\n                                    className={cx(props.kcInputClass)}\n                                    name=\"email\"\n                                    defaultValue={register.formData.email ?? \"\"}\n                                    autoComplete=\"email\"\n                                />\n                            </div>\n                        </div>\n                        {!realm.registrationEmailAsUsername && (\n                            <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"username\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"text\"\n                                        id=\"username\"\n                                        className={cx(props.kcInputClass)}\n                                        name=\"username\"\n                                        defaultValue={register.formData.username ?? \"\"}\n                                        autoComplete=\"username\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n                        {passwordRequired && (\n                            <>\n                                <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\n                                    <div className={cx(props.kcLabelWrapperClass)}>\n                                        <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>\n                                            {msg(\"password\")}\n                                        </label>\n                                    </div>\n                                    <div className={cx(props.kcInputWrapperClass)}>\n                                        <input\n                                            type=\"password\"\n                                            id=\"password\"\n                                            className={cx(props.kcInputClass)}\n                                            name=\"password\"\n                                            autoComplete=\"new-password\"\n                                        />\n                                    </div>\n                                </div>\n\n                                <div\n                                    className={cx(\n                                        props.kcFormGroupClass,\n                                        messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass)\n                                    )}\n                                >\n                                    <div className={cx(props.kcLabelWrapperClass)}>\n                                        <label htmlFor=\"password-confirm\" className={cx(props.kcLabelClass)}>\n                                            {msg(\"passwordConfirm\")}\n                                        </label>\n                                    </div>\n                                    <div className={cx(props.kcInputWrapperClass)}>\n                                        <input type=\"password\" id=\"password-confirm\" className={cx(props.kcInputClass)} name=\"password-confirm\" />\n                                    </div>\n                                </div>\n                            </>\n                        )}\n                        {recaptchaRequired && (\n                            <div className=\"form-group\">\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                                </div>\n                            </div>\n                        )}\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                                <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                    <span>\n                                        <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                                <input\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonPrimaryClass,\n                                        props.kcButtonBlockClass,\n                                        props.kcButtonLargeClass\n                                    )}\n                                    type=\"submit\"\n                                    value={msgStr(\"doRegister\")}\n                                />\n                            </div>\n                        </div>\n                    </form>\n                }\n            />\n        );\n    }\n);\n\nexport default Register;\n"],"names":["Register","memo","_a","kcContext","i18n","doFetchDefaultThemeResources","props","__rest","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","cx","useCssAndCx","React","Template","Object","headerNode","formNode","id","className","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","_b","lastName","_c","email","_d","autoComplete","registrationEmailAsUsername","username","_e","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value"],"sourceRoot":""}