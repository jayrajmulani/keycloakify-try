{"version":3,"file":"static/js/114.eb53152c.chunk.js","mappings":"ugBAOMA,GAAkBC,EAAAA,EAAAA,OACpB,SAACC,G,MACGC,EAEmCD,EAFnCC,UACAC,EACmCF,EADnCE,K,EACmCF,EAAnCG,6BAAAA,OAAAA,IAA+B,KAC5BC,EAAKC,EAAAA,EAJX,qDAMWC,EAA4DL,EAA5DK,IAAKC,EAAuDN,EAAvDM,qBAAsBC,EAAiCP,EAAjCO,KAAMC,EAA2BR,EAA3BQ,KAAMC,EAAqBT,EAArBS,iBAEvCC,GAAOC,EAAAA,EAAAA,KAAPD,GAEAE,EAAgBX,EAAhBW,IAAKC,EAAWZ,EAAXY,OAEPC,EAA+F,CACjGC,SAAU,OACVC,WAAY,SACZC,WAAY,UAGhB,OACIC,EAAAA,cAACC,EAAAA,EAAQC,OAAAA,OAAAA,CAAAA,EAAAA,OAAAA,OAAAA,CACCpB,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCC,GAAK,CAC7DkB,WAAYT,EAAI,kBAChBU,SACIJ,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,KAAAA,CAAIK,GAAG,oBACHL,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAIN,EAAI,mBAERM,EAAAA,cAAAA,KAAAA,CAAIK,GAAG,0BACFhB,EAAKiB,OAAOC,sBAAsBC,KAAI,SAAAC,GAAG,OACtCT,EAAAA,cAAAA,KAAAA,KAAKS,EADiC,MAMjDnB,GAAgB,UAARA,EACLU,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAIN,EAAI,yBACRM,EAAAA,cAAAA,IAAAA,KACIA,EAAAA,cAAAA,OAAAA,CAAMK,GAAG,sBAAsBhB,EAAKqB,oBAExCV,EAAAA,cAAAA,IAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAGW,KAAMtB,EAAKuB,MAAOP,GAAG,gBACnBX,EAAI,2BAIjBM,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAIN,EAAI,yBACRM,EAAAA,cAAAA,IAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,CAAIK,GAAG,gBACFX,EAAI,iBADT,KAC6BA,EAAI,aAAD,OAAcL,EAAKiB,OAAOO,QAE1Db,EAAAA,cAAAA,KAAAA,CAAIK,GAAG,qBACFX,EAAI,sBADT,KACyE,QAAvC,EAAc,OAAdE,QAAc,IAAdA,OAAc,EAAdA,EAAiBP,EAAKiB,OAAOQ,kBAAUC,IAAAA,EAAAA,EAAI1B,EAAKiB,OAAOQ,WAEzFd,EAAAA,cAAAA,KAAAA,CAAIK,GAAG,kBACFX,EAAI,mBADT,KAC+BL,EAAKiB,OAAOU,QAErB,SAArB3B,EAAKiB,OAAOO,KACTb,EAAAA,cAAAA,KAAAA,CAAIK,GAAG,kBACFX,EAAI,qBADT,KACiCL,EAAKiB,OAAOW,QAG7CjB,EAAAA,cAAAA,KAAAA,CAAIK,GAAG,mBACFX,EAAI,oBADT,KACgCL,EAAKiB,OAAOY,oBAQhElB,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAIN,EAAI,mBACRM,EAAAA,cAAAA,MAAAA,CAAKK,GAAG,yBAAyBc,IAAG,iCAA4B9B,EAAK+B,kBAAoBC,IAAI,oBAC7FrB,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,IAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAGW,KAAMtB,EAAKiC,UAAWjB,GAAG,eACvBX,EAAI,4BAKrBM,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAIN,EAAI,mBACRM,EAAAA,cAAAA,IAAAA,KAAIN,EAAI,+BAIhBM,EAAAA,cAAAA,OAAAA,CAAMuB,OAAQpC,EAAIqC,YAAaC,UAAWjC,EAAGP,EAAMyC,aAAcrB,GAAG,wBAAwBsB,OAAO,QAC/F3B,EAAAA,cAAAA,MAAAA,CAAKyB,UAAWjC,EAAGP,EAAM2C,mBACrB5B,EAAAA,cAAAA,MAAAA,CAAKyB,UAAWjC,EAAGP,EAAM4C,sBACrB7B,EAAAA,cAAAA,QAAAA,CAAO8B,QAAQ,OAAOL,UAAWjC,EAAGP,EAAM8C,eACrCrC,EAAI,sBACA,IACTM,EAAAA,cAAAA,OAAAA,CAAMyB,UAAU,YAAU,MAE9BzB,EAAAA,cAAAA,MAAAA,CAAKyB,UAAWjC,EAAGP,EAAM4C,sBACrB7B,EAAAA,cAAAA,QAAAA,CACIa,KAAK,OACLR,GAAG,OACH2B,KAAK,OACLC,aAAa,MACbR,UAAWjC,EAAGP,EAAMiD,cAAa,eACnB3C,EAAiB4C,YAAY,UAG9C5C,EAAiB4C,YAAY,SAC1BnC,EAAAA,cAAAA,OAAAA,CAAMK,GAAG,uBAAuBoB,UAAWjC,EAAGP,EAAMmD,0BAAyB,YAAY,UACpF7C,EAAiB8C,IAAI,UAIlCrC,EAAAA,cAAAA,QAAAA,CAAOa,KAAK,SAASR,GAAG,aAAa2B,KAAK,aAAaM,MAAOjD,EAAKkD,aAClEjD,GAAQU,EAAAA,cAAAA,QAAAA,CAAOa,KAAK,SAASR,GAAG,OAAOiC,MAAOhD,KAGnDU,EAAAA,cAAAA,MAAAA,CAAKyB,UAAWjC,EAAGP,EAAM2C,mBACrB5B,EAAAA,cAAAA,MAAAA,CAAKyB,UAAWjC,EAAGP,EAAM4C,sBACrB7B,EAAAA,cAAAA,QAAAA,CAAO8B,QAAQ,YAAYL,UAAWjC,EAAGP,EAAM8C,eAC1CrC,EAAI,wBACA,IACRL,EAAKmD,eAAeC,QAAU,GAAKzC,EAAAA,cAAAA,OAAAA,CAAMyB,UAAU,YAAU,MAElEzB,EAAAA,cAAAA,MAAAA,CAAKyB,UAAWjC,EAAGP,EAAM4C,sBACrB7B,EAAAA,cAAAA,QAAAA,CACIa,KAAK,OACLR,GAAG,YACH2B,KAAK,YACLC,aAAa,MACbR,UAAWjC,EAAGP,EAAMiD,cAAa,eACnB3C,EAAiB4C,YAAY,eAE9C5C,EAAiB4C,YAAY,cAC1BnC,EAAAA,cAAAA,OAAAA,CAAMK,GAAG,wBAAwBoB,UAAWjC,EAAGP,EAAMmD,0BAAyB,YAAY,UACrF7C,EAAiB8C,IAAI,gBAMrCjD,EACGY,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,QAAAA,CACIa,KAAK,SACLY,UAAWjC,EAAGP,EAAMyD,cAAezD,EAAM0D,qBAAsB1D,EAAM2D,oBACrEvC,GAAG,cACHiC,MAAO3C,EAAO,cAElBK,EAAAA,cAAAA,SAAAA,CACIa,KAAK,SACLY,UAAWjC,EACPP,EAAMyD,cACNzD,EAAM4D,qBACN5D,EAAM2D,mBACN3D,EAAM2D,oBAEVvC,GAAG,gBACH2B,KAAK,aACLM,MAAM,QAVV,IAYM5C,EAAI,cAIdM,EAAAA,cAAAA,QAAAA,CACIa,KAAK,SACLY,UAAWjC,EAAGP,EAAMyD,cAAezD,EAAM0D,qBAAsB1D,EAAM2D,oBACrEvC,GAAG,cACHiC,MAAO3C,EAAO,kBAQ7C,IAGL,W","sources":["../node_modules/keycloakify/src/lib/components/LoginConfigTotp.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginConfigTotp = memo(\n    ({\n        kcContext,\n        i18n,\n        doFetchDefaultThemeResources = true,\n        ...props\n    }: { kcContext: KcContextBase.LoginConfigTotp; i18n: I18n; doFetchDefaultThemeResources?: boolean } & KcProps) => {\n        const { url, isAppInitiatedAction, totp, mode, messagesPerField } = kcContext;\n\n        const { cx } = useCssAndCx();\n\n        const { msg, msgStr } = i18n;\n\n        const algToKeyUriAlg: Record<KcContextBase.LoginConfigTotp[\"totp\"][\"policy\"][\"algorithm\"], string> = {\n            HmacSHA1: \"SHA1\",\n            HmacSHA256: \"SHA256\",\n            HmacSHA512: \"SHA512\"\n        };\n\n        return (\n            <Template\n                {...{ kcContext, i18n, doFetchDefaultThemeResources, ...props }}\n                headerNode={msg(\"loginTotpTitle\")}\n                formNode={\n                    <>\n                        <ol id=\"kc-totp-settings\">\n                            <li>\n                                <p>{msg(\"loginTotpStep1\")}</p>\n\n                                <ul id=\"kc-totp-supported-apps\">\n                                    {totp.policy.supportedApplications.map(app => (\n                                        <li>{app}</li>\n                                    ))}\n                                </ul>\n                            </li>\n\n                            {mode && mode == \"manual\" ? (\n                                <>\n                                    <li>\n                                        <p>{msg(\"loginTotpManualStep2\")}</p>\n                                        <p>\n                                            <span id=\"kc-totp-secret-key\">{totp.totpSecretEncoded}</span>\n                                        </p>\n                                        <p>\n                                            <a href={totp.qrUrl} id=\"mode-barcode\">\n                                                {msg(\"loginTotpScanBarcode\")}\n                                            </a>\n                                        </p>\n                                    </li>\n                                    <li>\n                                        <p>{msg(\"loginTotpManualStep3\")}</p>\n                                        <p>\n                                            <ul>\n                                                <li id=\"kc-totp-type\">\n                                                    {msg(\"loginTotpType\")}: {msg(`loginTotp.${totp.policy.type}`)}\n                                                </li>\n                                                <li id=\"kc-totp-algorithm\">\n                                                    {msg(\"loginTotpAlgorithm\")}: {algToKeyUriAlg?.[totp.policy.algorithm] ?? totp.policy.algorithm}\n                                                </li>\n                                                <li id=\"kc-totp-digits\">\n                                                    {msg(\"loginTotpDigits\")}: {totp.policy.digits}\n                                                </li>\n                                                {totp.policy.type === \"totp\" ? (\n                                                    <li id=\"kc-totp-period\">\n                                                        {msg(\"loginTotpInterval\")}: {totp.policy.period}\n                                                    </li>\n                                                ) : (\n                                                    <li id=\"kc-totp-counter\">\n                                                        {msg(\"loginTotpCounter\")}: {totp.policy.initialCounter}\n                                                    </li>\n                                                )}\n                                            </ul>\n                                        </p>\n                                    </li>\n                                </>\n                            ) : (\n                                <li>\n                                    <p>{msg(\"loginTotpStep2\")}</p>\n                                    <img id=\"kc-totp-secret-qr-code\" src={`data:image/png;base64, ${totp.totpSecretQrCode}`} alt=\"Figure: Barcode\" />\n                                    <br />\n                                    <p>\n                                        <a href={totp.manualUrl} id=\"mode-manual\">\n                                            {msg(\"loginTotpUnableToScan\")}\n                                        </a>\n                                    </p>\n                                </li>\n                            )}\n                            <li>\n                                <p>{msg(\"loginTotpStep3\")}</p>\n                                <p>{msg(\"loginTotpStep3DeviceName\")}</p>\n                            </li>\n                        </ol>\n\n                        <form action={url.loginAction} className={cx(props.kcFormClass)} id=\"kc-totp-settings-form\" method=\"post\">\n                            <div className={cx(props.kcFormGroupClass)}>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <label htmlFor=\"totp\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"authenticatorCode\")}\n                                    </label>{\" \"}\n                                    <span className=\"required\">*</span>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"text\"\n                                        id=\"totp\"\n                                        name=\"totp\"\n                                        autoComplete=\"off\"\n                                        className={cx(props.kcInputClass)}\n                                        aria-invalid={messagesPerField.existsError(\"totp\")}\n                                    />\n\n                                    {messagesPerField.existsError(\"totp\") && (\n                                        <span id=\"input-error-otp-code\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                            {messagesPerField.get(\"totp\")}\n                                        </span>\n                                    )}\n                                </div>\n                                <input type=\"hidden\" id=\"totpSecret\" name=\"totpSecret\" value={totp.totpSecret} />\n                                {mode && <input type=\"hidden\" id=\"mode\" value={mode} />}\n                            </div>\n\n                            <div className={cx(props.kcFormGroupClass)}>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <label htmlFor=\"userLabel\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"loginTotpDeviceName\")}\n                                    </label>{\" \"}\n                                    {totp.otpCredentials.length >= 1 && <span className=\"required\">*</span>}\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"text\"\n                                        id=\"userLabel\"\n                                        name=\"userLabel\"\n                                        autoComplete=\"off\"\n                                        className={cx(props.kcInputClass)}\n                                        aria-invalid={messagesPerField.existsError(\"userLabel\")}\n                                    />\n                                    {messagesPerField.existsError(\"userLabel\") && (\n                                        <span id=\"input-error-otp-label\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                            {messagesPerField.get(\"userLabel\")}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            {isAppInitiatedAction ? (\n                                <>\n                                    <input\n                                        type=\"submit\"\n                                        className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                        id=\"saveTOTPBtn\"\n                                        value={msgStr(\"doSubmit\")}\n                                    />\n                                    <button\n                                        type=\"submit\"\n                                        className={cx(\n                                            props.kcButtonClass,\n                                            props.kcButtonDefaultClass,\n                                            props.kcButtonLargeClass,\n                                            props.kcButtonLargeClass\n                                        )}\n                                        id=\"cancelTOTPBtn\"\n                                        name=\"cancel-aia\"\n                                        value=\"true\"\n                                    >\n                                        ${msg(\"doCancel\")}\n                                    </button>\n                                </>\n                            ) : (\n                                <input\n                                    type=\"submit\"\n                                    className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                    id=\"saveTOTPBtn\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                            )}\n                        </form>\n                    </>\n                }\n            />\n        );\n    }\n);\n\nexport default LoginConfigTotp;\n"],"names":["LoginConfigTotp","memo","_a","kcContext","i18n","doFetchDefaultThemeResources","props","__rest","url","isAppInitiatedAction","totp","mode","messagesPerField","cx","useCssAndCx","msg","msgStr","algToKeyUriAlg","HmacSHA1","HmacSHA256","HmacSHA512","React","Template","Object","headerNode","formNode","id","policy","supportedApplications","map","app","totpSecretEncoded","href","qrUrl","type","algorithm","_b","digits","period","initialCounter","src","totpSecretQrCode","alt","manualUrl","action","loginAction","className","kcFormClass","method","kcFormGroupClass","kcInputWrapperClass","htmlFor","kcLabelClass","name","autoComplete","kcInputClass","existsError","kcInputErrorMessageClass","get","value","totpSecret","otpCredentials","length","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","kcButtonDefaultClass"],"sourceRoot":""}