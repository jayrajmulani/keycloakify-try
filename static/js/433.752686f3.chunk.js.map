{"version":3,"file":"static/js/433.752686f3.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginUsername.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport type { FormEventHandler } from \"react\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginUsername = memo(\n    ({\n        kcContext,\n        i18n,\n        doFetchDefaultThemeResources = true,\n        ...props\n    }: { kcContext: KcContextBase.LoginUsername; i18n: I18n; doFetchDefaultThemeResources?: boolean } & KcProps) => {\n        const { social, realm, url, usernameHidden, login, registrationDisabled } = kcContext;\n\n        const { msg, msgStr } = i18n;\n\n        const { cx } = useCssAndCx();\n\n        const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n        const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n            e.preventDefault();\n\n            setIsLoginButtonDisabled(true);\n\n            const formElement = e.target as HTMLFormElement;\n\n            //NOTE: Even if we login with email Keycloak expect username and password in\n            //the POST request.\n            formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n            formElement.submit();\n        });\n\n        return (\n            <Template\n                {...{ kcContext, i18n, doFetchDefaultThemeResources, ...props }}\n                displayInfo={social.displayInfo}\n                displayWide={realm.password && social.providers !== undefined}\n                headerNode={msg(\"doLogIn\")}\n                formNode={\n                    <div id=\"kc-form\" className={cx(realm.password && social.providers !== undefined && props.kcContentWrapperClass)}>\n                        <div\n                            id=\"kc-form-wrapper\"\n                            className={cx(\n                                realm.password && social.providers && [props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass]\n                            )}\n                        >\n                            {realm.password && (\n                                <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                                    <div className={cx(props.kcFormGroupClass)}>\n                                        {!usernameHidden &&\n                                            (() => {\n                                                const label = !realm.loginWithEmailAllowed\n                                                    ? \"username\"\n                                                    : realm.registrationEmailAsUsername\n                                                    ? \"email\"\n                                                    : \"usernameOrEmail\";\n\n                                                const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                                return (\n                                                    <>\n                                                        <label htmlFor={autoCompleteHelper} className={cx(props.kcLabelClass)}>\n                                                            {msg(label)}\n                                                        </label>\n                                                        <input\n                                                            tabIndex={1}\n                                                            id={autoCompleteHelper}\n                                                            className={cx(props.kcInputClass)}\n                                                            //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                            //the browser how to pre fill the form but before submit we put it back\n                                                            //to username because it is what keycloak expects.\n                                                            name={autoCompleteHelper}\n                                                            defaultValue={login.username ?? \"\"}\n                                                            type=\"text\"\n                                                            autoFocus={true}\n                                                            autoComplete=\"off\"\n                                                        />\n                                                    </>\n                                                );\n                                            })()}\n                                    </div>\n                                    <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                                        <div id=\"kc-form-options\">\n                                            {realm.rememberMe && !usernameHidden && (\n                                                <div className=\"checkbox\">\n                                                    <label>\n                                                        <input\n                                                            tabIndex={3}\n                                                            id=\"rememberMe\"\n                                                            name=\"rememberMe\"\n                                                            type=\"checkbox\"\n                                                            {...(login.rememberMe\n                                                                ? {\n                                                                      \"checked\": true\n                                                                  }\n                                                                : {})}\n                                                        />\n                                                        {msg(\"rememberMe\")}\n                                                    </label>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div id=\"kc-form-buttons\" className={cx(props.kcFormGroupClass)}>\n                                        <input\n                                            tabIndex={4}\n                                            className={cx(\n                                                props.kcButtonClass,\n                                                props.kcButtonPrimaryClass,\n                                                props.kcButtonBlockClass,\n                                                props.kcButtonLargeClass\n                                            )}\n                                            name=\"login\"\n                                            id=\"kc-login\"\n                                            type=\"submit\"\n                                            value={msgStr(\"doLogIn\")}\n                                            disabled={isLoginButtonDisabled}\n                                        />\n                                    </div>\n                                </form>\n                            )}\n                        </div>\n                        {realm.password && social.providers !== undefined && (\n                            <div id=\"kc-social-providers\" className={cx(props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass)}>\n                                <ul\n                                    className={cx(\n                                        props.kcFormSocialAccountListClass,\n                                        social.providers.length > 4 && props.kcFormSocialAccountDoubleListClass\n                                    )}\n                                >\n                                    {social.providers.map(p => (\n                                        <li key={p.providerId} className={cx(props.kcFormSocialAccountListLinkClass)}>\n                                            <a href={p.loginUrl} id={`zocial-${p.alias}`} className={cx(\"zocial\", p.providerId)}>\n                                                <span>{p.displayName}</span>\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </div>\n                        )}\n                    </div>\n                }\n                infoNode={\n                    realm.password &&\n                    realm.registrationAllowed &&\n                    !registrationDisabled && (\n                        <div id=\"kc-registration\">\n                            <span>\n                                {msg(\"noAccount\")}\n                                <a tabIndex={6} href={url.registrationUrl}>\n                                    {msg(\"doRegister\")}\n                                </a>\n                            </span>\n                        </div>\n                    )\n                }\n            />\n        );\n    }\n);\n\nexport default LoginUsername;\n"],"names":["LoginUsername","memo","_a","kcContext","i18n","doFetchDefaultThemeResources","props","__rest","social","realm","url","usernameHidden","login","registrationDisabled","msg","msgStr","cx","useCssAndCx","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","setAttribute","submit","React","Template","Object","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoFocus","autoComplete","kcFormSettingClass","rememberMe","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","key","providerId","kcFormSocialAccountListLinkClass","href","loginUrl","alias","displayName","infoNode","registrationAllowed","registrationUrl"],"sourceRoot":""}