{"version":3,"file":"static/js/331.07135d3b.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/Login.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport type { FormEventHandler } from \"react\";\nimport type { I18n } from \"../i18n\";\n\nconst Login = memo(\n    ({\n        kcContext,\n        i18n,\n        doFetchDefaultThemeResources = true,\n        ...props\n    }: { kcContext: KcContextBase.Login; i18n: I18n; doFetchDefaultThemeResources?: boolean } & KcProps) => {\n        const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n\n        const { msg, msgStr } = i18n;\n\n        const { cx } = useCssAndCx();\n\n        const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n        const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n            e.preventDefault();\n\n            setIsLoginButtonDisabled(true);\n\n            const formElement = e.target as HTMLFormElement;\n\n            //NOTE: Even if we login with email Keycloak expect username and password in\n            //the POST request.\n            formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n            formElement.submit();\n        });\n\n        return (\n            <Template\n                {...{ kcContext, i18n, doFetchDefaultThemeResources, ...props }}\n                displayInfo={social.displayInfo}\n                displayWide={realm.password && social.providers !== undefined}\n                headerNode={msg(\"doLogIn\")}\n                formNode={\n                    <div id=\"kc-form\" className={cx(realm.password && social.providers !== undefined && props.kcContentWrapperClass)}>\n                        <div\n                            id=\"kc-form-wrapper\"\n                            className={cx(\n                                realm.password && social.providers && [props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass]\n                            )}\n                        >\n                            {realm.password && (\n                                <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                                    <div className={cx(props.kcFormGroupClass)}>\n                                        {(() => {\n                                            const label = !realm.loginWithEmailAllowed\n                                                ? \"username\"\n                                                : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                            const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                            return (\n                                                <>\n                                                    <label htmlFor={autoCompleteHelper} className={cx(props.kcLabelClass)}>\n                                                        {msg(label)}\n                                                    </label>\n                                                    <input\n                                                        tabIndex={1}\n                                                        id={autoCompleteHelper}\n                                                        className={cx(props.kcInputClass)}\n                                                        //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                        //the browser how to pre fill the form but before submit we put it back\n                                                        //to username because it is what keycloak expects.\n                                                        name={autoCompleteHelper}\n                                                        defaultValue={login.username ?? \"\"}\n                                                        type=\"text\"\n                                                        {...(usernameEditDisabled\n                                                            ? { \"disabled\": true }\n                                                            : {\n                                                                  \"autoFocus\": true,\n                                                                  \"autoComplete\": \"off\"\n                                                              })}\n                                                    />\n                                                </>\n                                            );\n                                        })()}\n                                    </div>\n                                    <div className={cx(props.kcFormGroupClass)}>\n                                        <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>\n                                            {msg(\"password\")}\n                                        </label>\n                                        <input\n                                            tabIndex={2}\n                                            id=\"password\"\n                                            className={cx(props.kcInputClass)}\n                                            name=\"password\"\n                                            type=\"password\"\n                                            autoComplete=\"off\"\n                                        />\n                                    </div>\n                                    <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                                        <div id=\"kc-form-options\">\n                                            {realm.rememberMe && !usernameEditDisabled && (\n                                                <div className=\"checkbox\">\n                                                    <label>\n                                                        <input\n                                                            tabIndex={3}\n                                                            id=\"rememberMe\"\n                                                            name=\"rememberMe\"\n                                                            type=\"checkbox\"\n                                                            {...(login.rememberMe\n                                                                ? {\n                                                                      \"checked\": true\n                                                                  }\n                                                                : {})}\n                                                        />\n                                                        {msg(\"rememberMe\")}\n                                                    </label>\n                                                </div>\n                                            )}\n                                        </div>\n                                        <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                            {realm.resetPasswordAllowed && (\n                                                <span>\n                                                    <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                        {msg(\"doForgotPassword\")}\n                                                    </a>\n                                                </span>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div id=\"kc-form-buttons\" className={cx(props.kcFormGroupClass)}>\n                                        <input\n                                            type=\"hidden\"\n                                            id=\"id-hidden-input\"\n                                            name=\"credentialId\"\n                                            {...(auth?.selectedCredential !== undefined\n                                                ? {\n                                                      \"value\": auth.selectedCredential\n                                                  }\n                                                : {})}\n                                        />\n                                        <input\n                                            tabIndex={4}\n                                            className={cx(\n                                                props.kcButtonClass,\n                                                props.kcButtonPrimaryClass,\n                                                props.kcButtonBlockClass,\n                                                props.kcButtonLargeClass\n                                            )}\n                                            name=\"login\"\n                                            id=\"kc-login\"\n                                            type=\"submit\"\n                                            value={msgStr(\"doLogIn\")}\n                                            disabled={isLoginButtonDisabled}\n                                        />\n                                    </div>\n                                </form>\n                            )}\n                        </div>\n                        {realm.password && social.providers !== undefined && (\n                            <div id=\"kc-social-providers\" className={cx(props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass)}>\n                                <ul\n                                    className={cx(\n                                        props.kcFormSocialAccountListClass,\n                                        social.providers.length > 4 && props.kcFormSocialAccountDoubleListClass\n                                    )}\n                                >\n                                    {social.providers.map(p => (\n                                        <li key={p.providerId} className={cx(props.kcFormSocialAccountListLinkClass)}>\n                                            <a href={p.loginUrl} id={`zocial-${p.alias}`} className={cx(\"zocial\", p.providerId)}>\n                                                <span>{p.displayName}</span>\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </div>\n                        )}\n                    </div>\n                }\n                infoNode={\n                    realm.password &&\n                    realm.registrationAllowed &&\n                    !registrationDisabled && (\n                        <div id=\"kc-registration\">\n                            <span>\n                                {msg(\"noAccount\")}\n                                <a tabIndex={6} href={url.registrationUrl}>\n                                    {msg(\"doRegister\")}\n                                </a>\n                            </span>\n                        </div>\n                    )\n                }\n            />\n        );\n    }\n);\n\nexport default Login;\n"],"names":["Login","memo","_a","kcContext","i18n","doFetchDefaultThemeResources","props","__rest","social","realm","url","usernameEditDisabled","login","auth","registrationDisabled","msg","msgStr","cx","useCssAndCx","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","setAttribute","submit","React","Template","Object","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoComplete","kcFormSettingClass","rememberMe","kcFormOptionsWrapperClass","resetPasswordAllowed","href","loginResetCredentialsUrl","selectedCredential","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","key","providerId","kcFormSocialAccountListLinkClass","loginUrl","alias","displayName","infoNode","registrationAllowed","registrationUrl"],"sourceRoot":""}