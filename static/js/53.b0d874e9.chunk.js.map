{"version":3,"file":"static/js/53.b0d874e9.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/UpdateUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nconst UpdateUserProfile = memo(\n    ({\n        kcContext,\n        i18n,\n        doFetchDefaultThemeResources = true,\n        ...props\n    }: { kcContext: KcContextBase.UpdateUserProfile; i18n: I18n; doFetchDefaultThemeResources?: boolean } & KcProps) => {\n        const { cx } = useCssAndCx();\n\n        const { msg, msgStr } = i18n;\n\n        const { url, isAppInitiatedAction } = kcContext;\n\n        const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n        return (\n            <Template\n                {...{ kcContext, i18n, doFetchDefaultThemeResources, ...props }}\n                headerNode={msg(\"loginProfileTitle\")}\n                formNode={\n                    <form id=\"kc-update-profile-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                        <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...props} />\n\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                                <div className={cx(props.kcFormOptionsWrapperClass)}></div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                                {isAppInitiatedAction ? (\n                                    <>\n                                        <input\n                                            className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                            type=\"submit\"\n                                            value={msgStr(\"doSubmit\")}\n                                        />\n                                        <button\n                                            className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonLargeClass)}\n                                            type=\"submit\"\n                                            name=\"cancel-aia\"\n                                            value=\"true\"\n                                            formNoValidate\n                                        >\n                                            {msg(\"doCancel\")}\n                                        </button>\n                                    </>\n                                ) : (\n                                    <input\n                                        className={cx(\n                                            props.kcButtonClass,\n                                            props.kcButtonPrimaryClass,\n                                            props.kcButtonBlockClass,\n                                            props.kcButtonLargeClass\n                                        )}\n                                        type=\"submit\"\n                                        defaultValue={msgStr(\"doSubmit\")}\n                                        disabled={!isFomSubmittable}\n                                    />\n                                )}\n                            </div>\n                        </div>\n                    </form>\n                }\n            />\n        );\n    }\n);\n\nexport default UpdateUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../../tools/useCssAndCx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { cx, css } = useCssAndCx();\n\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={cx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={cx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={cx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 && (\n                                        <span\n                                            id={`input-error-${attribute.name}`}\n                                            className={cx(\n                                                props.kcInputErrorMessageClass,\n                                                css({\n                                                    \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                    \"& > span\": { \"display\": \"block\" }\n                                                })\n                                            )}\n                                            aria-live=\"polite\"\n                                        >\n                                            {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["UpdateUserProfile","memo","_a","kcContext","i18n","doFetchDefaultThemeResources","props","__rest","cx","useCssAndCx","msg","msgStr","url","isAppInitiatedAction","useState","isFomSubmittable","setIsFomSubmittable","React","Template","Object","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","type","value","kcButtonDefaultClass","name","formNoValidate","kcButtonBlockClass","defaultValue","disabled","BeforeField","AfterField","css","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}