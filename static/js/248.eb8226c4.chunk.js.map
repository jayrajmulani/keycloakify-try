{"version":3,"file":"static/js/248.eb8226c4.chunk.js","mappings":"ugBAOMA,GAAqBC,EAAAA,EAAAA,OACvB,SAACC,G,IACGC,EAEmCD,EAFnCC,UACAC,EACmCF,EADnCE,K,EACmCF,EAAnCG,6BAAAA,OAAAA,IAA+B,KAC5BC,EAAKC,EAAAA,EAJX,qDAMWC,EAAqBL,EAArBK,IAAKC,EAAgBN,EAAhBM,MAAOC,EAASP,EAATO,KAEZC,EAAgBP,EAAhBO,IAAKC,EAAWR,EAAXQ,OAELC,GAAOC,EAAAA,EAAAA,KAAPD,GAER,OACIE,EAAAA,cAACC,EAAAA,EAAQC,OAAAA,OAAAA,CAAAA,EAAAA,OAAAA,OAAAA,CACCd,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCC,GAAK,CAC7DY,gBAAgB,EAChBC,WAAYR,EAAI,oBAChBS,SACIL,EAAAA,cAAAA,OAAAA,CAAMM,GAAG,yBAAyBC,UAAWT,EAAGP,EAAMiB,aAAcC,OAAQhB,EAAIiB,YAAaC,OAAO,QAChGX,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGP,EAAMqB,mBACrBZ,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGP,EAAMsB,sBACrBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,WAAWP,UAAWT,EAAGP,EAAMwB,eACxCrB,EAAMsB,sBAEDtB,EAAMuB,4BAEPrB,EAAI,SADJA,EAAI,mBAFJA,EAAI,cAMlBI,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGP,EAAM2B,sBACrBlB,EAAAA,cAAAA,QAAAA,CACImB,KAAK,OACLb,GAAG,WACHc,KAAK,WACLb,UAAWT,EAAGP,EAAM8B,cACpBC,WAAS,EACTC,kBAAuBC,IAAT7B,GAAsBA,EAAK8B,aAAe9B,EAAK+B,uBAAoBF,MAI7FxB,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGP,EAAMqB,iBAAkBrB,EAAMoC,qBAC7C3B,EAAAA,cAAAA,MAAAA,CAAKM,GAAG,kBAAkBC,UAAWT,EAAGP,EAAMqC,qBAC1C5B,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGP,EAAMsC,4BACrB7B,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAG8B,KAAMrC,EAAIsC,UAAWnC,EAAI,mBAKxCI,EAAAA,cAAAA,MAAAA,CAAKM,GAAG,kBAAkBC,UAAWT,EAAGP,EAAMyC,qBAC1ChC,EAAAA,cAAAA,QAAAA,CACIO,UAAWT,EACPP,EAAM0C,cACN1C,EAAM2C,qBACN3C,EAAM4C,mBACN5C,EAAM6C,oBAEVjB,KAAK,SACLkB,MAAOxC,EAAO,iBAMlCyC,SAAU1C,EAAI,sBAGzB,IAGL,W","sources":["../node_modules/keycloakify/src/lib/components/LoginResetPassword.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginResetPassword = memo(\n    ({\n        kcContext,\n        i18n,\n        doFetchDefaultThemeResources = true,\n        ...props\n    }: { kcContext: KcContextBase.LoginResetPassword; i18n: I18n; doFetchDefaultThemeResources?: boolean } & KcProps) => {\n        const { url, realm, auth } = kcContext;\n\n        const { msg, msgStr } = i18n;\n\n        const { cx } = useCssAndCx();\n\n        return (\n            <Template\n                {...{ kcContext, i18n, doFetchDefaultThemeResources, ...props }}\n                displayMessage={false}\n                headerNode={msg(\"emailForgotTitle\")}\n                formNode={\n                    <form id=\"kc-reset-password-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                    {!realm.loginWithEmailAllowed\n                                        ? msg(\"username\")\n                                        : !realm.registrationEmailAsUsername\n                                        ? msg(\"usernameOrEmail\")\n                                        : msg(\"email\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    name=\"username\"\n                                    className={cx(props.kcInputClass)}\n                                    autoFocus\n                                    defaultValue={auth !== undefined && auth.showUsername ? auth.attemptedUsername : undefined}\n                                />\n                            </div>\n                        </div>\n                        <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                            <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                                <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                    <span>\n                                        <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                                <input\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonPrimaryClass,\n                                        props.kcButtonBlockClass,\n                                        props.kcButtonLargeClass\n                                    )}\n                                    type=\"submit\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                            </div>\n                        </div>\n                    </form>\n                }\n                infoNode={msg(\"emailInstruction\")}\n            />\n        );\n    }\n);\n\nexport default LoginResetPassword;\n"],"names":["LoginResetPassword","memo","_a","kcContext","i18n","doFetchDefaultThemeResources","props","__rest","url","realm","auth","msg","msgStr","cx","useCssAndCx","React","Template","Object","displayMessage","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","kcFormGroupClass","kcLabelWrapperClass","htmlFor","kcLabelClass","loginWithEmailAllowed","registrationEmailAsUsername","kcInputWrapperClass","type","name","kcInputClass","autoFocus","defaultValue","undefined","showUsername","attemptedUsername","kcFormSettingClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","infoNode"],"sourceRoot":""}