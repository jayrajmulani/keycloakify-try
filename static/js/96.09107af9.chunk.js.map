{"version":3,"file":"static/js/96.09107af9.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginUpdatePassword.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginUpdatePassword = memo(\n    ({\n        kcContext,\n        i18n,\n        doFetchDefaultThemeResources = true,\n        ...props\n    }: { kcContext: KcContextBase.LoginUpdatePassword; i18n: I18n; doFetchDefaultThemeResources?: boolean } & KcProps) => {\n        const { cx } = useCssAndCx();\n\n        const { msg, msgStr } = i18n;\n\n        const { url, messagesPerField, isAppInitiatedAction, username } = kcContext;\n\n        return (\n            <Template\n                {...{ kcContext, i18n, doFetchDefaultThemeResources, ...props }}\n                headerNode={msg(\"updatePasswordTitle\")}\n                formNode={\n                    <form id=\"kc-passwd-update-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                        <input\n                            type=\"text\"\n                            id=\"username\"\n                            name=\"username\"\n                            value={username}\n                            readOnly={true}\n                            autoComplete=\"username\"\n                            style={{ display: \"none\" }}\n                        />\n                        <input type=\"password\" id=\"password\" name=\"password\" autoComplete=\"current-password\" style={{ display: \"none\" }} />\n\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"password-new\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"passwordNew\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"password\"\n                                    id=\"password-new\"\n                                    name=\"password-new\"\n                                    autoFocus\n                                    autoComplete=\"new-password\"\n                                    className={cx(props.kcInputClass)}\n                                />\n                            </div>\n                        </div>\n\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"password-confirm\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"passwordConfirm\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"password\"\n                                    id=\"password-confirm\"\n                                    name=\"password-confirm\"\n                                    autoComplete=\"new-password\"\n                                    className={cx(props.kcInputClass)}\n                                />\n                            </div>\n                        </div>\n\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                                <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                    {isAppInitiatedAction && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input type=\"checkbox\" id=\"logout-sessions\" name=\"logout-sessions\" value=\"on\" checked />\n                                                {msgStr(\"logoutOtherSessions\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n\n                            <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                                {isAppInitiatedAction ? (\n                                    <>\n                                        <input\n                                            className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                            type=\"submit\"\n                                            defaultValue={msgStr(\"doSubmit\")}\n                                        />\n                                        <button\n                                            className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonLargeClass)}\n                                            type=\"submit\"\n                                            name=\"cancel-aia\"\n                                            value=\"true\"\n                                        >\n                                            {msg(\"doCancel\")}\n                                        </button>\n                                    </>\n                                ) : (\n                                    <input\n                                        className={cx(\n                                            props.kcButtonClass,\n                                            props.kcButtonPrimaryClass,\n                                            props.kcButtonBlockClass,\n                                            props.kcButtonLargeClass\n                                        )}\n                                        type=\"submit\"\n                                        defaultValue={msgStr(\"doSubmit\")}\n                                    />\n                                )}\n                            </div>\n                        </div>\n                    </form>\n                }\n            />\n        );\n    }\n);\n\nexport default LoginUpdatePassword;\n"],"names":["LoginUpdatePassword","memo","_a","kcContext","i18n","doFetchDefaultThemeResources","props","__rest","cx","useCssAndCx","msg","msgStr","url","messagesPerField","isAppInitiatedAction","username","React","Template","Object","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","type","name","value","readOnly","autoComplete","style","display","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","autoFocus","kcInputClass","kcFormOptionsClass","kcFormOptionsWrapperClass","checked","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","defaultValue","kcButtonDefaultClass","kcButtonBlockClass"],"sourceRoot":""}